# --- MIREX プロジェクト 環境変数設定サンプル --- #
# このファイルを `.env` としてコピーし、環境に合わせて値を設定してください。
# 値が設定されていない場合、可能な範囲でデフォルト値が使用されますが、
# 特に API キーなどの機密情報は明示的な設定が必要です。
# !! 注意: `.env` ファイルは Git リポジトリにコミットしないでください。 !!
# !! `.gitignore` に `.env` が含まれていることを確認してください。        !!

# === MCPサーバー設定 ===
# MCP_SERVER_URL=http://localhost:5002
#   役割: MCPサーバーのURL。
#   区分: 任意 (設定がない場合は localhost:5002 が使用されます)
#   デフォルト: http://localhost:5002
#
# MCP_PORT=5002
#   役割: MCPサーバーがリッスンするポート。主に `uvicorn` 起動時に使用されます。
#   区分: 任意 (設定がない場合は uvicorn のデフォルト 8000 or コマンドライン引数で指定)
#   デフォルト: 5002 (ただし、起動スクリプトやコマンドライン引数に依存)
#
# MCP_POLL_INTERVAL=5
#   役割: クライアント (auto_improver.py) がジョブ状態をポーリングする間隔（秒）。
#   区分: 任意
#   デフォルト: 5
#
# MCP_JOB_TIMEOUT=600
#   役割: MCPサーバーで実行される非同期ジョブの最大実行時間（秒）。これを超えるとタイムアウトとして扱われます。
#   区分: 任意
#   デフォルト: 600
#
# MCP_SESSION_TIMEOUT=3600
#   役割: 改善セッションの有効期限（秒）。最終アクティビティからこの時間が経過すると期限切れと見なされる可能性があります（具体的な実装による）。
#   区分: 任意
#   デフォルト: 3600
#
# MCP_REQUEST_TIMEOUT=60
#   役割: クライアント (auto_improver.py など) がMCPサーバーにリクエストを送る際のタイムアウト時間（秒）。
#   区分: 任意
#   デフォルト: 60

# === 一般設定 ===
# MCP_LOG_LEVEL=INFO
#   役割: アプリケーションのログレベル。
#   区分: 任意 (DEBUG, INFO, WARNING, ERROR, CRITICAL から選択)
#   デフォルト: INFO
#
# MCP_CONFIG_PATH=config.yaml
#   役割: 追加の設定が記述されたYAMLファイルへのパス。環境変数や `.env` の設定はこのファイルの設定を上書きします。
#   区分: 任意
#   デフォルト: config.yaml
#
# MIREX_WORKSPACE=./mcp_workspace
#   役割: MCPサーバーが生成するファイル (データベース、評価結果、ログなど) を保存するベースディレクトリ。
#   区分: 必須 (未設定の場合、起動時にエラーになるか、 './mcp_workspace' が試みられます。明示的な設定を強く推奨)
#   デフォルト: ./mcp_workspace (コード内のフォールバック)

# === AI モデル API キー ===
# !! 機密情報: これらのキーは絶対に公開しないでください。 `.env` ファイルを使用し、`.gitignore` に追加してください。 !!
# ANTHROPIC_API_KEY=sk-ant-...
#   役割: Anthropic (Claude) のモデルを使用する場合に必要なAPIキー。
#   区分: 条件付き必須 (Claudeモデル利用時)
#
# OPENAI_API_KEY=sk-...
#   役割: OpenAI のモデルを使用する場合に必要なAPIキー。
#   区分: 条件付き必須 (OpenAIモデル利用時)
#
# LLM_MODEL_NAME=claude-3-opus-20240229
#   役割: LLMによるコード改善などで使用するAIモデルの名前。
#   区分: 任意 (設定がない場合、 `config.yaml` の `llm.model_name` またはコード内のデフォルトが使用されます)
#   デフォルト: (config.yaml 参照)

# === クライアント (auto_improver.py) 設定 ===
# MCP_MAX_ITERATIONS=5
#   役割: `auto_improver.py` が実行する自動改善の最大試行回数。
#   区分: 任意
#   デフォルト: 5
#
# MCP_IMPROVEMENT_THRESHOLD=0.05
#   役割: 改善と見なされるパフォーマンス向上の最小閾値 (相対値)。
#   区分: 任意
#   デフォルト: 0.05
#
# MCP_GRID_SEARCH_ENABLED=true
#   役割: `auto_improver.py` において、グリッドサーチによるパラメータ最適化を有効にするかどうか。
#   区分: 任意
#   デフォルト: true

# === データパス設定 (注意: `config.yaml` での設定を推奨) ===
# これらの設定は主にローカルでの開発やテスト用です。
# `config.yaml` の `paths` または `datasets` セクションで、より詳細かつ柔軟に設定することを推奨します。
# `config.yaml` の設定が優先される場合があります。
# MIREX_DATA_DIR=data
#   役割: データセットのルートディレクトリ。
#   区分: 任意 ( `config.yaml` での上書き推奨)
# MIREX_AUDIO_DIR=datasets/synthesized/audio
#   役割: 音声ファイルが含まれるディレクトリ。
#   区分: 任意 ( `config.yaml` での上書き推奨)
# MIREX_LABEL_DIR=datasets/synthesized/labels
#   役割: ラベルファイル (正解データ) が含まれるディレクトリ。
#   区分: 任意 ( `config.yaml` での上書き推奨)
# MIREX_OUTPUT_DIR=evaluation_results
#   役割: 評価結果を保存するディレクトリ。
#   区分: 任意 ( `config.yaml` での上書き推奨)
# MIREX_TEMPLATE_DIR=templates
#   役割: LLMプロンプトテンプレートなどが含まれるディレクトリ。
#   区分: 任意 ( `config.yaml` での上書き推奨)

# === Claude Desktop 連携設定 (任意: `setup_claude_integration.py` 用) ===
# CLAUDE_CONFIG_PATH=~/Library/Application Support/Claude/storage/config.json
#   役割: Claude Desktopアプリケーションの設定ファイルへのパス。OSによってパスは異なります。
#   区分: 任意 (Claude Desktop 連携スクリプト使用時のみ) 